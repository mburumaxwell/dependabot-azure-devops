{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "3661784367808800983"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "dependabot",
      "minLength": 5,
      "maxLength": 24,
      "metadata": {
        "description": "Name of the resources. Make sure it is unique e.g. dependabotcontoso to avoid conflicts or failures"
      }
    },
    "projectSetups": {
      "type": "string",
      "defaultValue": "[[]",
      "metadata": {
        "description": "JSON array string for projects to setup. E.g. [{\"url\":\"https://dev.azure.com/tingle/dependabot\",\"token\":\"dummy\",\"AutoComplete\":true}]"
      }
    },
    "githubToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Access token for authenticating requests to GitHub."
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "#{IMAGE_TAG}#",
      "minLength": 1,
      "metadata": {
        "description": "Tag of the docker images."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "queueScaleRules",
        "count": "[length(variables('queueNames'))]",
        "input": {
          "name": "[format('azure-servicebus-{0}', variables('queueNames')[copyIndex('queueScaleRules')])]",
          "custom": {
            "type": "azure-servicebus",
            "metadata": {
              "namespace": "[parameters('name')]",
              "queueName": "[variables('queueNames')[copyIndex('queueScaleRules')]]",
              "messageCount": "100"
            },
            "auth": [
              {
                "secretRef": "connection-strings-asb-scaler",
                "triggerParameter": "connection"
              }
            ]
          }
        }
      }
    ],
    "fileShares": [
      "certs",
      "distributed-locks",
      "working-dir"
    ],
    "storageAccountName": "[replace(replace(if(equals(parameters('name'), 'dependabot'), 'dependabotstore', parameters('name')), '-', ''), '_', '')]",
    "sqlServerAdministratorLogin": "[uniqueString(resourceGroup().id)]",
    "sqlServerAdministratorLoginPassword": "[format('{0}%{1}', skip(uniqueString(resourceGroup().id), 5), uniqueString('sql-password', resourceGroup().id))]",
    "queueNames": [
      "process-synchronization",
      "repository-created",
      "repository-updated",
      "repository-deleted",
      "trigger-update-jobs",
      "update-job-check-state",
      "update-job-collect-logs"
    ]
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('name'), 'sql-login')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[variables('sqlServerAdministratorLogin')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('name'), 'sql-password')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[variables('sqlServerAdministratorLoginPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/keys",
      "apiVersion": "2023-02-01",
      "name": "[format('{0}/{1}', parameters('name'), 'data-protection')]",
      "properties": {
        "keySize": 2048,
        "attributes": {
          "enabled": true
        },
        "kty": "RSA",
        "keyOps": [
          "encrypt",
          "decrypt",
          "sign",
          "verify",
          "wrapKey",
          "unwrapKey"
        ],
        "rotationPolicy": {
          "lifetimeActions": [
            {
              "action": {
                "type": "Notify"
              },
              "trigger": {
                "timeBeforeExpiry": "P30D"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "shares",
        "count": "[length(variables('fileShares'))]"
      },
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', variables('fileShares')[copyIndex()])]",
      "properties": {
        "accessTier": "TransactionOptimized",
        "shareQuota": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "storages",
        "count": "[length(variables('fileShares'))]"
      },
      "type": "Microsoft.App/managedEnvironments/storages",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', parameters('name'), variables('fileShares')[copyIndex()])]",
      "properties": {
        "azureFile": {
          "accountName": "[variables('storageAccountName')]",
          "accountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value]",
          "shareName": "[variables('fileShares')[copyIndex()]]",
          "accessMode": "ReadWrite"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "accessPolicies": [],
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90
      }
    },
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "disableLocalAuth": false,
        "zoneRedundant": false
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2023-03-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "softDeleteRetentionInDays": 0
      },
      "sku": {
        "name": "free"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2022-05-01-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicNetworkAccess": "Enabled",
        "administratorLogin": "[variables('sqlServerAdministratorLogin')]",
        "administratorLoginPassword": "[variables('sqlServerAdministratorLoginPassword')]",
        "primaryUserAssignedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "restrictOutboundNetworkAccess": "Disabled"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2022-08-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "endIpAddress": "0.0.0.0",
        "startIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2022-05-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), parameters('name'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": 2147483648,
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": false,
        "readScale": "Disabled",
        "requestedBackupStorageRedundancy": "Geo",
        "isLedgerOn": false
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "workspaceCapping": {
          "dailyQuotaGb": "[json('0.167')]"
        }
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').primarySharedKey]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 8080,
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          },
          "secrets": [
            {
              "name": "connection-strings-application-insights",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString]"
            },
            {
              "name": "project-setups",
              "value": "[parameters('projectSetups')]"
            },
            {
              "name": "connection-strings-sql",
              "value": "[join(createArray(format('Server=tcp:{0},1433', reference(resourceId('Microsoft.Sql/servers', parameters('name')), '2022-05-01-preview').fullyQualifiedDomainName), format('Initial Catalog={0}', parameters('name')), format('User ID={0}', variables('sqlServerAdministratorLogin')), format('Password={0}', variables('sqlServerAdministratorLoginPassword')), 'Persist Security Info=False', 'MultipleActiveResultSets=False', 'Encrypt=True', 'TrustServerCertificate=False', 'Connection Timeout=30'), ';')]"
            },
            {
              "name": "connection-strings-asb-scaler",
              "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', parameters('name'), 'RootManageSharedAccessKey'), '2021-11-01').primaryConnectionString]"
            }
          ]
        },
        "template": {
          "containers": [
            {
              "image": "[format('ghcr.io/tinglesoftware/dependabot-server:{0}', parameters('imageTag'))]",
              "name": "dependabot",
              "volumeMounts": [
                {
                  "mountPath": "/mnt/dependabot",
                  "volumeName": "working-dir"
                },
                {
                  "mountPath": "/mnt/distributed-locks",
                  "volumeName": "distributed-locks"
                }
              ],
              "env": [
                {
                  "name": "AZURE_CLIENT_ID",
                  "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
                },
                {
                  "name": "ASPNETCORE_FORWARDEDHEADERS_ENABLED",
                  "value": "true"
                },
                {
                  "name": "EFCORE_PERFORM_MIGRATIONS",
                  "value": "true"
                },
                {
                  "name": "PROJECT_SETUPS",
                  "secretRef": "project-setups"
                },
                {
                  "name": "AzureAppConfig__Endpoint",
                  "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name')), '2023-03-01').endpoint]"
                },
                {
                  "name": "AzureAppConfig__Label",
                  "value": "Production"
                },
                {
                  "name": "ApplicationInsights__ConnectionString",
                  "secretRef": "connection-strings-application-insights"
                },
                {
                  "name": "ConnectionStrings__Sql",
                  "secretRef": "connection-strings-sql"
                },
                {
                  "name": "DataProtection__Azure__KeyVault__KeyUrl",
                  "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('name'), 'data-protection'), '2023-02-01').keyUri]"
                },
                {
                  "name": "DistributedLocking__FilePath",
                  "value": "/mnt/distributed-locks"
                },
                {
                  "name": "Logging__ApplicationInsights__LogLevel__Default",
                  "value": "None"
                },
                {
                  "name": "Logging__Seq__LogLevel__Default",
                  "value": "Warning"
                },
                {
                  "name": "Logging__Seq__ServerUrl",
                  "value": ""
                },
                {
                  "name": "Logging__Seq__ApiKey",
                  "value": ""
                },
                {
                  "name": "Workflow__JobsApiUrl",
                  "value": "[format('https://{0}.{1}', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "Workflow__WorkingDirectory",
                  "value": "/mnt/dependabot"
                },
                {
                  "name": "Workflow__WebhookEndpoint",
                  "value": "[format('https://{0}.{1}/webhooks/azure', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "Workflow__ResourceGroupId",
                  "value": "[resourceGroup().id]"
                },
                {
                  "name": "Workflow__AppEnvironmentId",
                  "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                },
                {
                  "name": "Workflow__LogAnalyticsWorkspaceId",
                  "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId]"
                },
                {
                  "name": "Workflow__UpdaterImageTag",
                  "value": "[parameters('imageTag')]"
                },
                {
                  "name": "Workflow__GithubToken",
                  "value": "[parameters('githubToken')]"
                },
                {
                  "name": "Workflow__Location",
                  "value": "[parameters('location')]"
                },
                {
                  "name": "Authentication__Schemes__Management__Authority",
                  "value": "[format('{0}{1}/v2.0', environment().authentication.loginEndpoint, subscription().tenantId)]"
                },
                {
                  "name": "Authentication__Schemes__Management__ValidAudiences__0",
                  "value": "[format('https://{0}.{1}', parameters('name'), reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain)]"
                },
                {
                  "name": "EventBus__SelectedTransport",
                  "value": "ServiceBus"
                },
                {
                  "name": "EventBus__Transports__azure-service-bus__FullyQualifiedNamespace",
                  "value": "[split(split(reference(resourceId('Microsoft.ServiceBus/namespaces', parameters('name')), '2021-11-01').serviceBusEndpoint, '/')[2], ':')[0]]"
                }
              ],
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "probes": [
                {
                  "type": "Startup",
                  "httpGet": {
                    "port": 8080,
                    "path": "/liveness"
                  },
                  "initialDelaySeconds": 10,
                  "timeoutSeconds": 100,
                  "failureThreshold": 10
                },
                {
                  "type": "Liveness",
                  "httpGet": {
                    "port": 8080,
                    "path": "/liveness"
                  }
                },
                {
                  "type": "Readiness",
                  "httpGet": {
                    "port": 8080,
                    "path": "/health"
                  },
                  "failureThreshold": 10,
                  "initialDelaySeconds": 3,
                  "timeoutSeconds": 5
                }
              ]
            }
          ],
          "volumes": [
            {
              "name": "working-dir",
              "storageName": "working-dir",
              "storageType": "AzureFile"
            },
            {
              "name": "distributed-locks",
              "storageName": "distributed-locks",
              "storageType": "AzureFile"
            }
          ],
          "scale": {
            "minReplicas": 1,
            "maxReplicas": 1,
            "rules": "[concat(createArray(createObject('name', 'http', 'http', createObject('metadata', createObject('concurrentRequests', '1000')))), variables('queueScaleRules'))]"
          }
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('name'))]",
        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "[resourceId('Microsoft.Insights/components', parameters('name'))]",
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('name'), 'data-protection')]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('name'))]",
        "[resourceId('Microsoft.Sql/servers', parameters('name'))]",
        "[resourceId('Microsoft.Sql/servers/databases', parameters('name'), parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'ContributorRoleAssignment')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'KeyVaultAdministrator')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'AzureServiceBusDataOwner')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'AppConfigurationDataReader')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '516239f1-63e1-4d78-a4de-a74fb236a071')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'StorageBlobDataContributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'LogAnalyticsReader')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "webhookEndpoint": {
      "type": "string",
      "value": "[format('https://{0}/webhooks/azure', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn)]"
    }
  }
}